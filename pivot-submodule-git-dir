#!/usr/bin/env bash
# Fix problems derived from the Git submodules' ".git" directory not being the real Git repository directory.
#
# Copyright 2024 林博仁(Buo-ren Lin) <buo.ren.lin@gmail.com>
# SPDX-License-Identifier: AGPL-3.0-or-later

printf \
    'Info: Configuring the defensive interpreter behaviors...\n'
set_opts=(
    # Terminate script execution when an unhandled error occurs
    -o errexit
    -o errtrace

    # Terminate script execution when an unset parameter variable is
    # referenced
    -o nounset
)
if ! set "${set_opts[@]}"; then
    printf \
        'Error: Unable to configure the defensive interpreter behaviors.\n' \
        1>&2
    exit 1
fi

printf \
    'Info: Checking the existence of the required commands...\n'
required_commands=(
    # For backing up the submodule pointer file
    cp

    # For determining the operation timestamp
    date

    # For creating the symbolic link to the new repository directory location
    ln

    # For parsing the real submodule repository directory from the submodule pointer file
    grep

    # For removing the submodule pointer file
    rm

    # For determining the absolute path of the program
    realpath
)
flag_required_command_check_failed=false
for command in "${required_commands[@]}"; do
    if ! command -v "${command}" >/dev/null; then
        flag_required_command_check_failed=true
        printf \
            'Error: This program requires the "%s" command to be available in your command search PATHs.\n' \
            "${command}" \
            1>&2
    fi
done
if test "${flag_required_command_check_failed}" == true; then
    printf \
        'Error: Required command check failed, please check your installation.\n' \
        1>&2
    exit 1
fi

printf \
    'Info: Configuring the convenience variables...\n'
if test -v BASH_SOURCE; then
    # Convenience variables may not need to be referenced
    # shellcheck disable=SC2034
    {
        printf \
            'Info: Determining the absolute path of the program...\n'
        if ! script="$(
            realpath \
                --strip \
                "${BASH_SOURCE[0]}"
            )"; then
            printf \
                'Error: Unable to determine the absolute path of the program.\n' \
                1>&2
            exit 1
        fi
        script_dir="${script%/*}"
        script_filename="${script##*/}"
        script_name="${script_filename%%.*}"
    }
fi
# Convenience variables may not need to be referenced
# shellcheck disable=SC2034
{
    script_basecommand="${0}"
    script_args=("${@}")
}

printf \
    'Info: Setting the ERR trap...\n'
trap_err(){
    printf \
        'Error: The program prematurely terminated due to an unhandled error.\n' \
        1>&2
    exit 99
}
if ! trap trap_err ERR; then
    printf \
        'Error: Unable to set the ERR trap.\n' \
        1>&2
    exit 1
fi

printf \
    'Info: Determining the operation timestamp...\n'
if ! operation_timestamp="$(date +%Y%m%d-%H%M%S)"; then
    printf \
        'Error: Unable to determine the operation timestamp.\n' \
        1>&2
    exit 2
fi
printf \
    'Info: Operation timestamp determined to be "%s"\n' \
    "${operation_timestamp}"

printf \
    'Info: Checking whether the .git directory is a submodule pointer file...\n'
local_git_direntry="${script_dir}/.git"
if ! test -f "${local_git_direntry}"; then
    printf \
        'Error: the local ".git" directory entry is not a submodule pointer file.\n' \
        1>&2
    exit 1
fi

submodule_pointer_file="${local_git_direntry}"

printf \
    'Info: Backing up the submodule pointer file...\n'
backed_up_submodule_pointer_file="${submodule_pointer_file}.orig"
cp_opts=(
    --archive
    --force
    --verbose
)
if ! cp "${cp_opts[@]}" \
    "${submodule_pointer_file}" \
    "${backed_up_submodule_pointer_file}"; then
    printf \
        'Error: Unable to backup the submodule pointer file.\n' \
        1>&2
    exit 2
fi

printf \
    'Info: Determining the submodule repository path...\n'
grep_opts=(
    --perl-regexp
    --only-matching
    --regexp='(?<=^gitdir: )[^\n]+'
)
if ! submodule_repository_path="$(
    grep "${grep_opts[@]}" "${submodule_pointer_file}"
    )"; then
    printf \
        'Error: Unable to parse out the submodule repository path from the submodule pointer file.\n' \
        1>&2
    exit 2
fi
printf \
    'Info: Submodule repository path determined to be "%s".\n' \
    "${submodule_repository_path}"

printf \
    'Info: Backing up the original local Git configuration file...\n'
local_git_config_file="${submodule_repository_path}/config"
backed_up_local_git_config_file="${local_git_config_file}.orig-${operation_timestamp}"
cp_opts=(
    --archive
    --verbose
)
if ! cp "${cp_opts[@]}" \
    "${local_git_config_file}" \
    "${backed_up_local_git_config_file}"; then
    printf \
        'Error: Unable to backup the original local Git configuration file.\n' \
        1>&2
    exit 2
fi

printf \
    'Info: Removing local Git worktree configuration...\n'
git_config_opts=(
    --local
    --unset
)
if ! git config "${git_config_opts[@]}" core.worktree; then
    printf \
        'Error: Unable to remove local Git worktree configuration.\n' \
        1>&2
    exit 2
fi

printf \
    'Info: Removing the submodule pointer file...\n'
rm_opts=(
    --verbose
)
if ! rm "${rm_opts[@]}" "${submodule_pointer_file}"; then
    printf \
        'Error: Unable to remove the submodule pointer file.\n' \
        1>&2
    exit 2
fi

printf \
    'Info: Moving the submodule repository to the submodule worktree...\n'
fixed_submodule_repository_path="${local_git_direntry}"
mv_opts=(
    --verbose
)
if ! mv "${mv_opts[@]}" \
    "${submodule_repository_path}" \
    "${fixed_submodule_repository_path}"; then
    printf \
        'Error: Unable to move the submodule repository to the submodule worktree.\n' \
        1>&2
    exit 2
fi

printf \
    'Info: Creating workaround symbolic link to fix Git operations in the submodule...\n'
ln_opts=(
    --symbolic
    --relative
    --verbose
)
if ! ln "${ln_opts[@]}" \
    "${fixed_submodule_repository_path}" \
    "${submodule_repository_path}"; then
    printf \
        'Error: Unable to create workaround symbolic link to fix Git operations in the submodule.\n' \
        1>&2
    exit 2
fi

printf \
    'Info: Operation completed without errors.\n'
